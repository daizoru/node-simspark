// Generated by CoffeeScript 1.4.0
(function() {
  var SimSpark, Stream, buffy, inspect, isArray, isString, net, pretty, sexp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  inspect = require('util').inspect;

  net = require('net');

  Stream = require('stream');

  buffy = require('buffy');

  sexp = require('./s-expression');

  pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  isArray = function(obj) {
    return Array.isArray(obj);
  };

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  SimSpark = (function(_super) {

    __extends(SimSpark, _super);

    function SimSpark(host, port) {
      var headerLen, length,
        _this = this;
      if (port == null) {
        port = 3100;
      }
      SimSpark.__super__.constructor.call(this, this);
      this.client = net.connect(port, host);
      this.reader = buffy.createReader();
      this.client.pipe(this.reader);
      headerLen = 4;
      length = headerLen;
      this.client.on('data', function(data) {
        var message, rawMsg, _results;
        _results = [];
        while (_this.reader.bytesAhead() >= length) {
          if (length === headerLen && _this.reader.bytesAhead() >= headerLen) {
            length = _this.reader.int32BE();
          }
          if (_this.reader.bytesAhead() >= length) {
            rawMsg = _this.reader.ascii(length);
            message = sexp("(" + rawMsg + ")");
            length = headerLen;
            _results.push(_this.emit('data', message));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      this.client.on('connect', function() {
        return _this.emit("connect", function() {});
      });
      this.client.on('end', function() {
        return _this.emit('end');
      });
    }

    SimSpark.prototype.send = function(messages) {
      var msg, msgPacket, msgString, _i, _len, _results;
      if (messages == null) {
        messages = [];
      }
      _results = [];
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        msg = messages[_i];
        msgString = sexp(msg);
        msgPacket = new Buffer(4 + msgString.length);
        msgPacket.writeInt32BE(msgString.length, 0);
        msgPacket.write(msgString, 4, 'ascii');
        _results.push(this.client.write(msgPacket));
      }
      return _results;
    };

    return SimSpark;

  })(Stream);

  module.exports = SimSpark;

}).call(this);
