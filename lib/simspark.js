// Generated by CoffeeScript 1.6.3
(function() {
  var Stream, buffy, inspect, isArray, isString, net, pretty, sexp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  inspect = require('util').inspect;

  net = require('net');

  Stream = require('stream');

  buffy = require('buffy');

  sexp = require('./s-expression');

  pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  isArray = function(obj) {
    return Array.isArray(obj);
  };

  isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  exports.Agent = (function(_super) {
    __extends(Agent, _super);

    function Agent(host, port) {
      var headerLen, length,
        _this = this;
      if (host == null) {
        host = "localhost";
      }
      if (port == null) {
        port = 3100;
      }
      Agent.__super__.constructor.call(this, this);
      this.client = net.connect(port, host);
      this.client.on('error', function(er) {
        return _this.emit('error', er);
      });
      this.client.on('connect', function(er) {
        return _this.emit("connect", function() {});
      });
      this.client.on('close', function() {
        return _this.emit('close');
      });
      this.reader = buffy.createReader();
      this.client.pipe(this.reader);
      headerLen = 4;
      length = headerLen;
      this.client.on('data', function(data) {
        var er, evt, message, rawMsg, _results;
        _results = [];
        while (_this.reader.bytesAhead() >= length) {
          if (length === headerLen && _this.reader.bytesAhead() >= headerLen) {
            length = _this.reader.int32BE();
          }
          if (_this.reader.bytesAhead() >= length) {
            rawMsg = _this.reader.ascii(length);
            message = [];
            try {
              message = sexp("(" + rawMsg + ")");
            } catch (_error) {
              er = _error;
              console.log("couldn't parse: " + pretty(er));
              console.log("original: " + pretty("(" + rawMsg + ")"));
            }
            length = headerLen;
          }
          _results.push((function() {
            var _i, _len, _results1;
            _results1 = [];
            for (_i = 0, _len = message.length; _i < _len; _i++) {
              evt = message[_i];
              console.log("@emit \"" + ("" + evt[0]).toLowerCase() + ("\": " + (pretty(evt.slice(1)))));
              _results1.push(this.emit(evt[0].toLowerCase(), evt.slice(1)));
            }
            return _results1;
          }).call(_this));
        }
        return _results;
      });
    }

    Agent.prototype.send = function(messages) {
      var msg, msgPacket, msgString, _i, _len, _results;
      if (messages == null) {
        messages = [];
      }
      _results = [];
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        msg = messages[_i];
        msgString = sexp(msg);
        msgPacket = new Buffer(4 + msgString.length);
        msgPacket.writeInt32BE(msgString.length, 0);
        msgPacket.write(msgString, 4, 'ascii');
        _results.push(this.client.write(msgPacket));
      }
      return _results;
    };

    Agent.prototype.close = function() {
      var er, _ref;
      try {
        return (_ref = this.client) != null ? typeof _ref.destroy === "function" ? _ref.destroy() : void 0 : void 0;
      } catch (_error) {
        er = _error;
        return console.log("notice: couldn't destroy the socket");
      }
    };

    return Agent;

  })(Stream);

  exports.Monitor = (function(_super) {
    __extends(Monitor, _super);

    function Monitor(host, port) {
      var headerLen, length,
        _this = this;
      if (host == null) {
        host = "localhost";
      }
      if (port == null) {
        port = 3200;
      }
      Monitor.__super__.constructor.call(this, this);
      this.client = net.connect(port, host);
      this.client.on('error', function(er) {
        return _this.emit('error', er);
      });
      this.client.on('connect', function(er) {
        return _this.emit("connect", function() {});
      });
      this.client.on('close', function() {
        return _this.emit('close');
      });
      this.reader = buffy.createReader();
      this.client.pipe(this.reader);
      headerLen = 4;
      length = headerLen;
      this.client.on('data', function(data) {
        var er, message, rawMsg, _results;
        _results = [];
        while (_this.reader.bytesAhead() >= length) {
          if (length === headerLen && _this.reader.bytesAhead() >= headerLen) {
            length = _this.reader.int32BE();
          }
          if (_this.reader.bytesAhead() >= length) {
            rawMsg = _this.reader.ascii(length);
            message = [];
            try {
              message = sexp("(" + rawMsg + ")");
            } catch (_error) {
              er = _error;
              console.log("couldn't parse: " + pretty(er));
              console.log("original: " + pretty("(" + rawMsg + ")"));
            }
            length = headerLen;
          }
          _results.push(_this.emit("data", message));
        }
        return _results;
      });
    }

    Monitor.prototype.send = function(messages) {
      var msg, msgPacket, msgString, _i, _len, _results;
      if (messages == null) {
        messages = [];
      }
      _results = [];
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        msg = messages[_i];
        msgString = sexp(msg);
        msgPacket = new Buffer(4 + msgString.length);
        msgPacket.writeInt32BE(msgString.length, 0);
        msgPacket.write(msgString, 4, 'ascii');
        _results.push(this.client.write(msgPacket));
      }
      return _results;
    };

    Monitor.prototype.close = function() {
      var er, _ref;
      try {
        return (_ref = this.client) != null ? typeof _ref.destroy === "function" ? _ref.destroy() : void 0 : void 0;
      } catch (_error) {
        er = _error;
        return console.log("notice: couldn't destroy the socket");
      }
    };

    return Monitor;

  })(Stream);

}).call(this);
